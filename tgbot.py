import logging
import os
from g4f.client import Client
import g4f
import requests
from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, ConversationHandler
from PIL import Image
from io import BytesIO
import tempfile
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN = ""

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 4096

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
MODE_TEXT = "text"
MODE_IMAGE = "image"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è g4f –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
g4f.debug.logging = False  # –û—Ç–∫–ª—é—á–∏—Ç—å –¥–µ–±–∞–≥ –ª–æ–≥–∏
# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
try:
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ API
    available_models = list(g4f.models.__all__)
except:
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
        available_models = [model.__name__ for model in g4f.models.list()]
    except:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        available_models = ["gpt-3.5-turbo", "gpt-4", "gpt-4o", "gpt-4o-mini"]

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    # –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if hasattr(g4f.models, "gpt_4o_mini"):
        text_model = g4f.models.gpt_4o_mini
    else:
        text_model = "gpt-4o-mini"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
    
    # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if hasattr(g4f.models, "flux"):
        image_model = g4f.models.flux
    else:
        image_model = "flux"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
except:
    text_model = "gpt-4o-mini"
    image_model = "flux"

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_history = {}
# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—Å—Ç)
user_mode = {}

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—Ç–∫–µ
    user_history[user_id] = []
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—Å—Ç
    user_mode[user_id] = MODE_TEXT
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = [
        [KeyboardButton("ü§ñ GPT"), KeyboardButton("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å GPT. '
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è GPT4free.\n\n'
        f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n'
        f'- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: gpt-4o-mini\n'
        f'- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: flux\n\n'
        f'–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ü§ñ GPT" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n'
        f'–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞',
        reply_markup=reply_markup
    )

def get_gpt_response(prompt, model=text_model, history=None):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT4free"""
    try:
        messages = []
        if history:
            messages.extend(history)
        
        messages.append({"role": "user", "content": prompt})
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        received_streaming_response = False
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç API
            client = Client()
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                response = client.chat.completions.create(
                    model=model,
                    messages=messages,
                    stream=False,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–º, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if hasattr(response, 'choices') and hasattr(response.choices[0], 'message'):
                    response_text = response.choices[0].message.content
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ—Ç–æ–∫–æ–≤—ã–π, —Å–æ–±–∏—Ä–∞–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
                    logger.warning("–ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ stream=False")
                    received_streaming_response = True
                    full_response = ""
                    
                    # –ï—Å–ª–∏ response - —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä
                    if hasattr(response, '__iter__') or hasattr(response, '__next__'):
                        for chunk in response:
                            if hasattr(chunk, 'choices') and len(chunk.choices) > 0:
                                if hasattr(chunk.choices[0], 'delta') and hasattr(chunk.choices[0].delta, 'content'):
                                    content = chunk.choices[0].delta.content
                                    if content:
                                        full_response += content
                                elif hasattr(chunk.choices[0], 'message') and hasattr(chunk.choices[0].message, 'content'):
                                    content = chunk.choices[0].message.content
                                    if content:
                                        full_response += content
                    
                    response_text = full_response if full_response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
            
            except Exception as stream_error:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞,
                # –ø–æ–ø—Ä–æ–±—É–µ–º —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏ —Å–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {stream_error}. –ü—Ä–æ–±—É–µ–º —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º.")
                received_streaming_response = True
                
                response = client.chat.completions.create(
                    model=model,
                    messages=messages,
                    stream=True,  # –Ø–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
                )
                
                full_response = ""
                for chunk in response:
                    if hasattr(chunk, 'choices') and len(chunk.choices) > 0:
                        if hasattr(chunk.choices[0], 'delta') and hasattr(chunk.choices[0].delta, 'content'):
                            content = chunk.choices[0].delta.content
                            if content:
                                full_response += content
                
                response_text = full_response if full_response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
                
        except Exception as client_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {client_error}")
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                response_text = g4f.ChatCompletion.create(
                    model=model,
                    messages=messages,
                    stream=False,
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
                if isinstance(response_text, (list, tuple, set)) or hasattr(response_text, '__iter__') or isinstance(response_text, dict):
                    logger.warning("g4f.ChatCompletion –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.")
                    received_streaming_response = True
                    
                    full_response = ""
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
                    if hasattr(response_text, '__iter__') and not isinstance(response_text, (str, dict)):
                        for chunk in response_text:
                            if isinstance(chunk, str):
                                full_response += chunk
                            elif isinstance(chunk, dict) and 'content' in chunk:
                                full_response += chunk['content']
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    elif isinstance(response_text, dict):
                        if 'content' in response_text:
                            full_response = response_text['content']
                        elif 'message' in response_text and 'content' in response_text['message']:
                            full_response = response_text['message']['content']
                    
                    response_text = full_response if full_response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "data: {" - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                elif isinstance(response_text, str) and "data: {" in response_text:
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                    received_streaming_response = True
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "data: {"content":"—Ç–µ–∫—Å—Ç"}"
                    full_response = ""
                    for line in response_text.split('\n'):
                        if line.startswith('data: {'):
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                import json
                                data_str = line.replace('data: ', '')
                                data = json.loads(data_str)
                                if 'content' in data and data['content']:
                                    full_response += data['content']
                            except Exception as json_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {json_error}")
                    
                    response_text = full_response if full_response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
                
            except Exception as g4f_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ g4f.ChatCompletion: {g4f_error}")
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥ –∏ —Å–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
                try:
                    logger.info("–ü—Ä–æ–±—É–µ–º —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∏–º–∏–Ω–≥ —á–µ—Ä–µ–∑ g4f.ChatCompletion")
                    received_streaming_response = True
                    
                    response_stream = g4f.ChatCompletion.create(
                        model=model,
                        messages=messages,
                        stream=True,
                    )
                    
                    full_response = ""
                    for chunk in response_stream:
                        if isinstance(chunk, str):
                            full_response += chunk
                        elif isinstance(chunk, dict) and 'content' in chunk:
                            full_response += chunk['content']
                    
                    response_text = full_response if full_response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
                except Exception as stream_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ g4f.ChatCompletion: {stream_error}")
                    response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(g4f_error)}"
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ
        if isinstance(response_text, str) and "data: {" in response_text:
            logger.warning("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            received_streaming_response = True
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "data: {"content":"—Ç–µ–∫—Å—Ç"}"
            full_response = ""
            for line in response_text.split('\n'):
                if line.startswith('data: {'):
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        import json
                        data_str = line.replace('data: ', '')
                        data = json.loads(data_str)
                        if 'content' in data and data['content']:
                            full_response += data['content']
                    except Exception as json_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {json_error}")
            
            if full_response:
                response_text = full_response
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if received_streaming_response:
            logger.info("–ë—ã–ª –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
        
        return response_text, {"role": "assistant", "content": response_text}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", None

def generate_image(prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = Client()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = client.images.generate(
                model="flux",
                prompt=prompt,
                response_format="url",
                width=1024,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                height=1024
            )
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if response and hasattr(response, 'data') and len(response.data) > 0:
                image_url = response.data[0].url
                logger.info(f"–ü–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_response = requests.get(image_url, timeout=60)
                
                if img_response.status_code == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        img = Image.open(BytesIO(img_response.content))
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
                        buffer = BytesIO()
                        img.convert('RGB').save(buffer, format='JPEG')
                        buffer.seek(0)
                        
                        return buffer.getvalue()
                    except Exception as img_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                        return None
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_response.status_code}")
                    return None
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ client.images.generate: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            try:
                logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ g4f.images.create")
                img_url = g4f.images.create(
                    prompt=prompt,
                    model="flux"
                )
                
                if img_url:
                    img_response = requests.get(img_url, timeout=60)
                    
                    if img_response.status_code == 200:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            img = Image.open(BytesIO(img_response.content))
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG
                            buffer = BytesIO()
                            img.convert('RGB').save(buffer, format='JPEG')
                            buffer.seek(0)
                            
                            return buffer.getvalue()
                        except Exception as img_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_error}")
                            return None
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_response.status_code}")
                        return None
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ g4f.images.create")
                    return None
            except Exception as alt_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {alt_error}")
                return None
                
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    prompt = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if prompt == "ü§ñ GPT":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        user_mode[user_id] = MODE_TEXT
        update.message.reply_text(
            "–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –∫ GPT."
        )
        return
    
    elif prompt == "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        user_mode[user_id] = MODE_IMAGE
        update.message.reply_text(
            "–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in user_history:
        user_history[user_id] = []
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–∂–∏–º–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if user_id not in user_mode:
        user_mode[user_id] = MODE_TEXT
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    if user_mode[user_id] == MODE_TEXT:
        # –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        # –û—Ç–ø—Ä–∞–≤–∫–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
        response, assistant_message = get_gpt_response(prompt, history=user_history[user_id])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history[user_id].append({"role": "user", "content": prompt})
        if assistant_message:
            user_history[user_id].append(assistant_message)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        message_parts = split_long_message(response)
        for i, part in enumerate(message_parts):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(message_parts) > 1:
                    part_indicator = f"[–ß–∞—Å—Ç—å {i+1}/{len(message_parts)}]\n"
                    if i > 0:  # –î–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
                        part = part_indicator + part
                    else:  # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
                        if len(part) + len(part_indicator) <= MAX_MESSAGE_LENGTH:
                            part = part_indicator + part
                
                update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å Markdown: {e}")
                update.message.reply_text(part)
    
    elif user_mode[user_id] == MODE_IMAGE:
        # –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –û—Ç–ø—Ä–∞–≤–∫–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ..."
        context.bot.send_chat_action(chat_id=update.effective_chat.id, action='upload_photo')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_data = generate_image(prompt)
        
        if img_data:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_file:
                tmp_file.write(img_data)
                tmp_file_path = tmp_file.name
            
            with open(tmp_file_path, 'rb') as f:
                update.message.reply_photo(
                    photo=f, 
                    caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
                )
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(tmp_file_path)
        else:
            update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def handle_gpt_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt"""
    user_id = update.effective_user.id
    
    if not context.args:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /gpt')
        return
    
    prompt = ' '.join(context.args)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in user_history:
        user_history[user_id] = []
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
    response, assistant_message = get_gpt_response(prompt, history=user_history[user_id])
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append({"role": "user", "content": prompt})
    if assistant_message:
        user_history[user_id].append(assistant_message)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    message_parts = split_long_message(response)
    for i, part in enumerate(message_parts):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(message_parts) > 1:
                part_indicator = f"[–ß–∞—Å—Ç—å {i+1}/{len(message_parts)}]\n"
                if i > 0:  # –î–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
                    part = part_indicator + part
                else:  # –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
                    if len(part) + len(part_indicator) <= MAX_MESSAGE_LENGTH:
                        part = part_indicator + part
            
            update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å Markdown: {e}")
            update.message.reply_text(part)

def handle_image_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /image"""
    if not context.args:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /image')
        return
    
    prompt = ' '.join(context.args)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ..."
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action='upload_photo')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_data = generate_image(prompt)
    
    if img_data:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_file:
            tmp_file.write(img_data)
            tmp_file_path = tmp_file.name
        
        with open(tmp_file_path, 'rb') as f:
            update.message.reply_photo(
                photo=f, 
                caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
            )
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.unlink(tmp_file_path)
    else:
        update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')

def clear_history(update: Update, context: CallbackContext) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id in user_history:
        user_history[user_id] = []
    update.message.reply_text('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.')

def list_models(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    models_list = "\n".join(available_models)
    update.message.reply_text(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}')

def split_long_message(text, max_length=MAX_MESSAGE_LENGTH):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–µ)
        if len(text) <= max_length:
            parts.append(text)
            break
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö max_length
        split_point = text[:max_length].rfind('\n')
        if split_point == -1 or split_point < max_length // 2:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É,
            # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª
            split_point = text[:max_length].rfind(' ')
            if split_point == -1 or split_point < max_length // 2:
                # –ï—Å–ª–∏ –∏ –ø—Ä–æ–±–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
                split_point = max_length
        else:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            split_point += 1
        
        parts.append(text[:split_point])
        text = text[split_point:]
    
    return parts

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    updater = Updater(TOKEN)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("gpt", handle_gpt_command))
    dispatcher.add_handler(CommandHandler("image", handle_image_command))
    dispatcher.add_handler(CommandHandler("clear", clear_history))
    dispatcher.add_handler(CommandHandler("models", list_models))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(cancel))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
